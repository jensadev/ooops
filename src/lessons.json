{
  "purpose": "Du ska få en grundläggande förståelse för objektorientering, vad det är, varför det används och hur. Du ska också få en grundläggande förståelse för klasser och objekt. Efter lektionen ska du kunna förklara vad objektorienterad programmering är.",
  "lessons": [
    {
      "title": "Introduktion till objektorienterad programmering",
      "content": [
        {
          "title": "Vad är objektorienterad programmering?",
          "purpose": [
            "Förstå grunderna i vad objektorientering innebär.",
            "Kunna skilja mellan objektorientering och andra paradigmer."
          ],
          "points": [
            "Definition av objektorientering",
            "Jämförelse med andra programmeringsparadigmer"
          ],
          "explanation": [
            "Objektorientering är en programmeringsmetod där programmet struktureras runt objekt, som kan innehålla data i form av egenskaper och funktioner i form av metoder.",
            "Till skillnad från andra sätt att programmera, där vi kanske bara tänker i termer av sekvenser av instruktioner, fokuserar objektorientering på att organisera koden kring objekt som representerar verkliga eller abstrakta enheter."
          ]
        },
        {
          "title": "Varför används objektorientering?",
          "purpose": [
            "Förstå varför objektorientering är användbart.",
            "Relatera teori till praktik."
          ],
          "points": [
            "Fördelar med objektorientering",
            "Praktiska exempel på användning"
          ],
          "explanation": [
            "Objektorientering gör koden mer läsbar, återanvändbar och underlättar samarbete. Det hjälper oss att hantera och strukturera större projekt.",
            "Tänk på objektorientering som att organisera ditt kök. Varje köksredskap (objekt) har sina egna egenskaper (storlek, form) och metoder (användning). På så sätt blir köket mer organiserat och enklare att använda."
          ]
        },
        {
          "title": "Grunderna i objektorienterad programmering",
          "purpose": [
            "Få en grundläggande förståelse för viktiga begrepp inom objektorientering.",
            "Känna till grunderna i klasser och objekt."
          ],
          "points": [
            "Klasser, objekt, egenskaper och metoder.",
            "Inkapsling, arv och polymorfism."
          ],
          "explanation": [
            "Klasser är som ritningar för att skapa objekt. Objekt är instanser av dessa klasser. Objekt är verkliga föremål eller instanser av något i programmet.",
            "Inkapsling handlar om att skydda data. Arv handlar om att en klass kan ärva egenskaper från en annan. Polymorfism låter oss använda objekt på olika sätt.",
            "En klass är en beskrivning av ett objekt. En klass beskriver vilka egenskaper och metoder ett objekt har. Ett objekt är en instans av en klass. Ett objekt är något som skapas utifrån en klass. En egenskap är data som tillhör ett objekt. T.ex. färg, storlek, namn. En metod är en funktion som kan utföras av ett objekt."
          ]
        }
      ],
      "keywords": [
        {
          "word": "Objektorienterad programmering",
          "description": "Objektorientering är en programmeringsmetod där programmet struktureras runt objekt."
        },
        {
          "word": "klasser",
          "description": "Klasser är som ritningar för att skapa objekt."
        },
        {
          "word": "objekt",
          "description": "Objekt är instanser av dessa klasser. Objekt är verkliga föremål eller instanser av något i programmet."
        },
        {
          "word": "inkapsling",
          "description": "Inkapsling är att skydda data."
        },
        {
          "word": "arv",
          "description": "Med arv kan en klass ärva egenskaper från en annan."
        },
        {
          "word": "polymorfism",
          "description": "Polymorfism betyder många former. Med polymorfism kan vi använda objekt på olika sätt."
        }
      ],
      "questions": [
        {
          "question": "Vad är objektorienterad programmering?",
          "answer": "Objektorienterad programmering är en programmeringsmetod som fokuserar på objekt."
        },
        {
          "question": "Vad är skillnaden mellan en klass och ett objekt?",
          "answer": "Klassen är en ritning, objektet är en instans av ritningen."
        },
        {
          "question": "Varför används objektorientering? Ge minst två fördelar.",
          "answer": "För att göra koden mer läsbar, återanvändbar och underlätta samarbete."
        }
      ],
      "exercise": {
        "title": "En objektorienterad historia",
        "material": "Penna och papper",
        "description": "Arbeta i par för att skapa en kort historia eller scen med minst två objekt(instanser av klasser). Beskriv era objekt och hur de interagerar med varandra. Använd minst tre begrepp från lektionen, såsom klasser, objekt, egenskaper eller metoder.",
        "instructions": "Presentera eran lösning. Diskutera."
      }
    },
    {
      "title": "Grundläggande om klasser och objekt",
      "content": [
        {
          "title": "Teori",
          "purpose": [
            "Förstå grunderna i klasser och objekt.",
            "Kunna skilja mellan olika delar av en klass."
          ],
          "points": [
            "Vad är klasser och objekt?",
            "Hur används klasser och objekt?",
            "Introduktion till egenskaper och metoder."
          ],
          "explanation": [
            "Klasser är som ritningar eller mallar för att skapa objekt. Objekt är instanser av dessa klasser, verkliga föremål eller instanser av något i programmet.",
            "Klasser hjälper oss att strukturera och organisera vår kod. Objekt låter oss arbeta med konkreta enheter inom programmet.",
            "Inom klasser har vi egenskaper (variabler) och metoder (funktioner). Egenskaper beskriver tillståndet av objektet, medan metoder utför åtgärder på objektet."
          ],
          "illustration": {
            "url": "/ooops/images/depositphotos_543641630-stock-illustration-object-oriented-programming-or-oop.jpg",
            "alt": "Illustration av en hund klass."
          }
        },
        {
          "title": "Praktik",
          "purpose": [
            " Tillämpa teoretiska kunskaper genom praktisk kodning.",
            "Kunna skapa och använda en grundläggande klass och objekt."
          ],
          "points": [
            "Skapa en enkel klass."
          ],
          "explanation": [
            "Din uppgift är att skapa en klass och ett objekt från denna. Utgå från något i din vardag eller ett intresse. Om du tycker det är svårt att komma på en klass, börja med ett objekt.",
            "Använd dig av https://draw.io för att skapa ett klassdiagram."
          ]
        }
      ],
      "keywords": [
        {
          "word": "klass",
          "description": "En klass är en ritning för att skapa objekt."
        },
        {
          "word": "objekt",
          "description": "Med objekt menas en instans av en klass."
        },
        {
          "word": "instans",
          "description": "En instans är ett objekt av en klass."
        },
        {
          "word": "medlemmar",
          "description": "Medlemmar används för att beskriva egenskaper och metoder i en klass."
        },
        {
          "word": "konstruktor",
          "description": "En konstruktor är en speciell metod som ofta heter samma sak som klassen. Den körs automatiskt när ett objekt skapas för att initialisera objektets egenskaper."
        },
        {
          "word": "instansiering",
          "description": "Med instansiering menas att skapa ett objekt av en klass."
        }
      ],
      "questions": [
        {
          "question": "Vad är en klass?",
          "answer": "En klass är en ritning för att skapa objekt."
        },
        {
          "question": "Vad är ett objekt?",
          "answer": "Ett objekt är en instans av en klass."
        },
        {
          "question": "Vad kallas variabler i en klass?",
          "answer": "Egenskaper."
        },
        {
          "question": "Vad är syftet med en konstruktor?",
          "answer": "Att initialisera egenskaper när ett objekt skapas."
        },
        {
          "question": "Hur skiljer sig en metod från en egenskap i en klass?",
          "answer": "En metod utför en åtgärd, medan en egenskap beskriver tillstånd."
        }
      ],
      "exercise": {
        "title": "Skapa klass och objekt i kod",
        "material": "Klassdiagramet, en IDE och valfritt programmeringsspråk",
        "description": "Koda den klass du skapade i det praktiska momentet. Implementera en konstruktor som tar emot värden för dessa egenskaper vid skapandet av ett nytt objekt. Ditt objekt bör minst ha tre egenskaper och två metoder. Skapa sedan två olika instanser av klassen med olika egenskaper. Anropa metoderna på instanserna av klassen.",
        "instructions": "Presentera eran lösning. Diskutera."
      }
    },
    {
      "title": "Inkapsling",
      "content": [
        {
          "title": "Vad är inkapsling?",
          "purpose": [
            "Förstå begreppet inkapsling och dess betydelse.",
            "Kunna identifiera situationer där inkapsling är fördelaktigt."
          ],
          "points": [
            "Definition av inkapsling.",
            "Varför det är viktigt i objektorienterad programmering"
          ],
          "explanation": [
            "Inkapsling är en av de fyra grundläggande koncepten inom objektorienterad programmering (OOP). Det innebär att du grupperar data och metoder som manipulerar den data som du samlat i en klass. Klassen fungerar som en slags behållare som skyddar och hanterar åtkomst till dess data.",
            "Genom inkapsling kan du begränsa åtkomsten till viss data eller delar av koden. Detta innebär att viss information kan hållas privat och skyddas från oönskad manipulation eller åtkomst från andra delar av programmet.",
            "Användande och underhåll, klassen presenterar ett gränssnitt för att arbeta med objektet. Så länge gränssnittet inte ändras, kan du ändra hur objektet fungerar internt utan att påverka andra delar av programmet."
          ]
        },
        {
          "title": "Private, public och protected",
          "purpose": [
            "Förstå begreppen och dess användningsområden.",
            "Kunna implementera inkapsling med hjälp av åtkomstegenskaperna."
          ],
          "points": [
            "Private",
            "Public",
            "Protected"
          ],
          "explanation": [
            "För att styra hur egenskaper och metoder kan nås från andra delar av programmet, kan vi använda oss av åtkomstegenskaper. Dessa är private, public och protected.",
            "Med private kan vi begränsa åtkomsten till en egenskap eller metod till klassen där den är deklarerad. Detta innebär att egenskapen eller metoden inte kan nås från andra delar av programmet.",
            "Med public kan vi tillåta åtkomst till egenskapen eller metoden från andra delar av programmet.",
            "Med protected kan vi begränsa åtkomsten till en egenskap eller metod till klassen där den är deklarerad och subklasser. Detta innebär att egenskapen eller metoden kan nås från andra delar av programmet, med viss begränsning."
          ]
        },
        {
          "title": "Vad är åtkomstmetoder?",
          "purpose": [
            "Förstå varför åtkomstmetoder behövs.",
            "Kunna implementera inkapsling med hjälp av åtkomstmetoder."
          ],
          "points": [
            "Vad är åtkomstmetoder?",
            "Varför behövs åtkomstmetoder?"
          ],
          "explanation": [
            "Åtkomstmetoder är metoder som används för att komma åt och ändra egenskaper. Vanligt kallade getters och setters.",
            "Åtkomstmetoder används för att komma åt och ändra egenskaper. Detta är viktigt för att kunna implementera inkapsling. Genom att använda åtkomstmetoder kan vi begränsa åtkomsten till egenskaper och metoder.",
            "Getters används för att hämta värden från egenskaper. Setters används för att ändra värden på egenskaper.",
            "Getters och setters är vanligtvis publika, medan egenskaperna är privata."
          ]
        }
      ],
      "keywords": [
        {
          "word": "inkapsling",
          "description": "Med inkapsling menas att skydda data."
        },
        {
          "word": "privat (private)",
          "description": "En privat egenskap kan bara nås inom klassen."
        },
        {
          "word": "publik (public)",
          "description": "En publik egenskap kan nås utanför klassen."
        },
        {
          "word": "skyddad (protected)",
          "description": "Skyddad betyder att egenskapen kan nås inom klassen och i subklasser."
        },
        {
          "word": "åtkomstmetoder",
          "description": "Detta är metoder för att komma åt och ändra egenskaper. Vanligt kallade getters och setters."
        }
      ],
      "questions": [
        {
          "question": "Vad är inkapsling?",
          "answer": "Inkapsling är att skydda data."
        },
        {
          "question": "Vad är skillnaden mellan private, public och protected?",
          "answer": "Private kan bara nås inom klassen, public kan nås utanför klassen och protected kan nås inom klassen och i subklasser."
        },
        {
          "question": "Vad är en åtkomstmetod?",
          "answer": "En åtkomstmetod är en metod för att komma åt och ändra egenskaper. Vanligt kallade getters och setters."
        }
      ],
      "exercise": {
        "title": "Planera en klass",
        "material": "Papper och penna, draw.io",
        "description": "Skapa en klass som beskriver något i din vardag, dig själv eller ett intresse. Skapa ett klassdiagram som visar klassens egenskaper och metoder. Använd dig av åtkomstegenskaper för att implementera inkapsling.",
        "instructions": "Presentera din lösning. Diskutera."
      }
    },
    {
      "title": "Arv och Polymorfism",
      "content": [
        {
          "title": "Vad är Arv?",
          "purpose": [
            "Definition av arv.",
            "Fördelar med arv och varför det används."
          ],
          "points": [
            "Förstå grunderna i vad arv är och hur det används.",
            "Kunna identifiera och förklara begrepp som förälderklass och härledd klass."
          ],
          "explanation": [
            "Arv används för att kunna återanvända kod. Det innebär att en klass kan ärva egenskaper och metoder från en annan klass. Den klass som ärver kallas för subklass eller härledd klass. Den klass som en subklass ärver från kallas för superklass eller förälderklass.",
            "Arv används för att skapa en hierarki av klasser.",
            "En subklass ärver alla egenskaper och metoder från sin superklass. Detta innebär att vi kan återanvända kod och skapa en hierarki av klasser."
          ]
        },
        {
          "title": "Vad är Polymorfism?",
          "purpose": [
            "Definition av polymorfism.",
            "Fördelar med polymorfism och varför det används."
          ],
          "points": [
            "Förstå grunderna i vad polymorfism är och hur det används.",
            "Kunna identifiera och förklara begrepp som overloading och overriding. Olika former av överlagring."
          ],
          "explanation": [
            "Polymorfism betyder många former. Med polymorfism kan vi använda objekt på olika sätt.",
            "Polymorfism låter oss använda metoder på olika sätt. Vanligt är overloading (flera metoder med samma namn som accepterar olika parametrar) och overriding (att en klass som ärver modifierar metoden)."
          ]
        }
      ],
      "keywords": [
        {
          "word": "arv",
          "description": "Med arv kan en klass ärva egenskaper från en annan. Arv används för att kunna återanvända kod."
        },
        {
          "word": "subklass",
          "description": "En subklass ärver egenskaper från en superklass. En subklass kallas även för härledd klass."
        },
        {
          "word": "superklass",
          "description": "En superklass ärver egenskaper till en subklass. En superklass kallas även för förälderklass."
        },
        {
          "word": "polymorfism",
          "description": "Polymorfism betyder många former. Med polymorfism kan vi använda objekt på olika sätt."
        },
        {
          "word": "overloading",
          "description": "Med överlagring menas att en metod kan ta olika antal parametrar. Detta gör att vi kan använda metoden på olika sätt."
        },
        {
          "word": "overriding",
          "description": "Med overriding menas att en subklass modifierar en metod som den ärver från en superklass."
        }
      ],
      "questions": [
        {
          "question": "Vad är arv?",
          "answer": "Arv är när en klass ärver egenskaper från en annan klass."
        },
        {
          "question": "Ge exempel på en relation med superklass och subklass? Utgå från exempelvis djur.",
          "answer": "En superklass kan vara djur och en subklass kan vara hund."
        },
        {
          "question": "Ge exempel på när polymorfism kan användas?",
          "answer": "Polymorfism kan användas när vi vill använda metoder på olika sätt."
        },
        {
          "question": "Vad är skillnaden mellan overloading och overriding?",
          "answer": "Overloading innebär att en metod kan ta olika antal parametrar. Overriding innebär att en subklass modifierar en metod som den ärver från en superklass."
        }
      ],
      "exercise": {
        "title": "Planera en superklass och subklass",
        "material": "Papper och penna, draw.io",
        "description": "Skapa en superklass och subklass som beskriver något i din vardag, dig själv eller ett intresse. Skapa ett klassdiagram som visar klassernas egenskaper och metoder. Använd dig av arv för att skapa en hierarki av klasser.",
        "instructions": "Presentera din lösning. Diskutera."
      }
    },
    {
      "title": "Sammanfattning, fyra koncept",
      "content": [
        {
          "title": "",
          "purpose": [
            "Vad, hur och varför."
          ],
          "points": [],
          "explanation": []
        }
      ],
      "keywords": [
        {
          "word": "Klasser och objekt",
          "description": "Klass är en ritning som definierar attribut (egenskaper) och metoder (funktioner) för att skapa objekt. Objekt är en instans av en klass. Objektet är det faktiska som skapats från klassen."
        },
        {
          "word": "Inkapsling",
          "description": "Inkapsling är att gruppera attribut och metoder i en klass och begränsa åtkomsten till dessa. Det innebär att vissa delar av koden kan vara privata och endast nås inom klassen, medan andra kan vara publika och nås från andra delar av programmet."
        },
        {
          "word": "Arv",
          "description": "Arv är när vi låter en klass ärva egenskaper och metoder från en annan klass. Arv möjliggör återanvändning av kod och skapar en hierarki av klasser."
        },
        {
          "word": "Polymorfism",
          "description": "Polymorfism är möjligheten för objekt av olika klasser att svara på samma metodanrop på ett enhetligt sätt. Det låter oss att använda metoder på olika sätt. Vanligt är overloading (flera metoder med samma namn som accepterar olika parametrar) och overriding (att en klass som ärver modifierar metoden)."
        }
      ],
      "questions": [
        {
          "question": "Vad är en klass?",
          "answer": "Se materialet"
        },
        {
          "question": "Vad är ett objekt?",
          "answer": "Se materialet"
        },
        {
          "question": "Förklara varför inkapsling är viktigt i objektorienterad programmering. Använd ett bankkonto som exempel.",
          "answer": "Se materialet"
        },
        {
          "question": "Visa hur du kan använda arv mellan två klasser.",
          "answer": "Se materialet"
        },
        {
          "question": "Ge exempel på en metod som använder polymorfism?",
          "answer": "Se materialet"
        }
      ],
      "exercise": {
        "title": "Koda",
        "material": "IDE",
        "description": "Skapa ett program som visar på samtliga fyra koncept.",
        "instructions": "Arbeta med programmet."
      }
    }
  ]
}